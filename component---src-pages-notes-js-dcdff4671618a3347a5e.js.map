{"version":3,"file":"component---src-pages-notes-js-dcdff4671618a3347a5e.js","mappings":"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","sources":["webpack://chen-huang/./src/components/slugify.js","webpack://chen-huang/./src/components/Notes/NotesInstitutions.js","webpack://chen-huang/./src/hooks/useRandomNotePost.js","webpack://chen-huang/./src/components/Notes/NotesLayout.js","webpack://chen-huang/./src/pages/notes.js","webpack://chen-huang/./src/components/Notes/NoteCard.js","webpack://chen-huang/./src/components/Notes/NotesTags.js","webpack://chen-huang/./src/components/common/SplitLayout.js"],"sourcesContent":["const slugify = (str) =>\n  str\n    ?.toString()\n    .trim()\n    .toLowerCase()\n    .replace(/[^a-z0-9\\s-]/g, \"\") // remove non-alphanumeric characters except space and dash\n    .replace(/\\s+/g, \"-\") // replace spaces with dashes\n    .replace(/-+/g, \"-\"); // collapse multiple dashes\n\nmodule.exports = slugify;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { graphql, useStaticQuery } from \"gatsby\";\nimport { Link, useI18next } from \"gatsby-plugin-react-i18next\";\nimport slugify from \"@components/slugify\";\n\nexport const useUniversity = () => {\n  const { language } = useI18next();\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(\n        limit: 2000\n        filter: { fields: { posttype: { eq: \"notes\" } } }\n      ) {\n        edges {\n          node {\n            fields {\n              language\n            }\n            frontmatter {\n              institution\n              institution_slug\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  // Filter by language and collect institutions\n  const languagePosts = data.allMarkdownRemark.edges.filter(\n    ({ node }) => node.fields.language === language\n  );\n\n  // Collect all institutions from current language posts\n  const institutionCounts = {};\n  languagePosts.forEach(({ node }) => {\n    if (node.frontmatter.institution) {\n      const institutions = Array.isArray(node.frontmatter.institution)\n        ? node.frontmatter.institution\n        : [node.frontmatter.institution];\n\n      institutions.forEach((institution) => {\n        institutionCounts[institution] =\n          (institutionCounts[institution] || 0) + 1;\n      });\n    }\n  });\n\n  // Convert to the expected format\n  const group = Object.entries(institutionCounts).map(\n    ([fieldValue, totalCount]) => ({\n      fieldValue,\n      totalCount,\n    })\n  );\n\n  return { allMarkdownRemark: { group } };\n};\n\nexport const TagBreadcrumb = styled(Link)`\n  float: left;\n  border: 1px solid ${(p) => (p.theme.dark ? p.theme.primaryColor : \"#d9e0ff\")};\n  border-radius: 50px;\n  padding: 8px 13px;\n  line-height: 110%;\n  margin: 5px;\n  font-size: 12px;\n\n  &:hover {\n    background: ${(p) => (p.theme.dark ? p.theme.primaryColor : \"#d9e0ff\")};\n    color: ${(p) => (p.theme.dark ? \"#d9e0ff\" : \"#105286\")};\n  }\n`;\n\nconst Institutions = () => {\n  const { language } = useI18next();\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(\n        limit: 2000\n        filter: { fields: { posttype: { eq: \"notes\" } } }\n      ) {\n        edges {\n          node {\n            fields {\n              language\n            }\n            frontmatter {\n              institution\n              institution_slug\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  // Filter by language and collect institutions\n  const languagePosts = data.allMarkdownRemark.edges.filter(\n    ({ node }) => node.fields.language === language\n  );\n\n  // Collect all institutions from current language posts\n  const institutionCounts = {};\n  languagePosts.forEach(({ node }) => {\n    if (node.frontmatter.institution) {\n      const institutions = Array.isArray(node.frontmatter.institution)\n        ? node.frontmatter.institution\n        : [node.frontmatter.institution];\n\n      institutions.forEach((institution) => {\n        institutionCounts[institution] =\n          (institutionCounts[institution] || 0) + 1;\n      });\n    }\n  });\n\n  // Convert to the expected format\n  const institutions = Object.entries(institutionCounts).map(\n    ([fieldValue, totalCount]) => ({\n      fieldValue,\n      totalCount,\n    })\n  );\n\n  return (\n    <section style={{ overflow: \"auto\" }}>\n      {institutions.map((tag) => {\n        // 查找 institution_slug\n        // 需要先找到对应的 node\n        const node = languagePosts.find(({ node }) =>\n          Array.isArray(node.frontmatter.institution)\n            ? node.frontmatter.institution.includes(tag.fieldValue)\n            : node.frontmatter.institution === tag.fieldValue\n        )?.node;\n\n        const slug =\n          node && node.frontmatter.institution_slug\n            ? node.frontmatter.institution_slug\n            : slugify(tag.fieldValue);\n\n        return (\n          <TagBreadcrumb\n            key={tag.fieldValue}\n            to={`/notes/institution/${slug}/`}\n            aria-label={`${tag.totalCount} posts tagged with ${tag.fieldValue}`}\n          >\n            {tag.fieldValue}, {tag.totalCount}\n          </TagBreadcrumb>\n        );\n      })}\n    </section>\n  );\n};\n\nexport default Institutions;\n","import { useStaticQuery, graphql } from \"gatsby\";\nimport { useTranslation } from \"gatsby-plugin-react-i18next\";\n\nexport const randomGenerator = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst useRandomNotePost = () => {\n  const { i18n } = useTranslation();\n  const currentLanguage = i18n.language;\n\n  const noteposts = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(filter: { fields: { posttype: { eq: \"notes\" } } }) {\n        edges {\n          node {\n            frontmatter {\n              title\n            }\n            fields {\n              slug\n              language\n            }\n          }\n        }\n        totalCount\n      }\n    }\n  `);\n\n  // 根据当前语言过滤文章\n  const filteredPosts = noteposts.allMarkdownRemark.edges.filter(\n    ({ node }) => node.fields.language === currentLanguage\n  );\n\n  // 如果没有当前语言的文章，返回null\n  if (filteredPosts.length === 0) {\n    return {\n      randomSlug: null,\n      randomTitle: null,\n    };\n  }\n\n  let randomPost = filteredPosts[randomGenerator(0, filteredPosts.length - 1)];\n\n  // make sure we don't have redundant randomPost\n  if (typeof window !== \"undefined\") {\n    while (randomPost.node.fields.slug === window.location.pathname) {\n      randomPost = filteredPosts[randomGenerator(0, filteredPosts.length - 1)];\n      // don't wanna run it second time\n      break;\n    }\n  }\n\n  return {\n    randomSlug: randomPost.node.fields.slug,\n    randomTitle: randomPost.node.frontmatter.title,\n  };\n};\nexport default useRandomNotePost;\n","import React from \"react\";\n\nimport PropTypes from \"prop-types\";\nimport { Link, Trans, useTranslation } from \"gatsby-plugin-react-i18next\";\nimport Tags from \"@src/components/Notes/NotesTags\";\nimport Institutions from \"@src/components/Notes/NotesInstitutions\";\nimport SplitLayout from \"@common/SplitLayout\";\nimport useRandomNotePost from \"@src/hooks/useRandomNotePost\";\n\nconst NoteLayout = ({ children, sharerSection }) => {\n  const { t } = useTranslation();\n  const { randomSlug, randomTitle } = useRandomNotePost();\n\n  return (\n    <SplitLayout\n      content={children}\n      aside={\n        <>\n          {randomSlug && randomTitle && (\n            <section>\n              <h4>{t(\"nav.random-note\", \"Random note\")}</h4>\n              <Link style={{ fontSize: \"16px\" }} to={randomSlug}>\n                {randomTitle}\n              </Link>\n              <br />\n              <br />\n            </section>\n          )}\n          <section>\n            <h4>{t(\"nav.tags\", \"Tags\")}</h4>\n            <Tags />\n            <br />\n          </section>\n          <section>\n            <h4>{t(\"nav.institution\", \"Institution\")}</h4>\n            <Institutions />\n            <br />\n          </section>\n          {sharerSection && sharerSection}\n        </>\n      }\n    />\n  );\n};\n\nNoteLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n  sharerSection: PropTypes.node,\n};\n\nexport default NoteLayout;\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport { useTranslation } from \"gatsby-plugin-react-i18next\";\nimport SEO from \"@components/seo\";\n\nimport Layout from \"@components/Layout/Layout\";\nimport NoteCard from \"@components/Notes/NoteCard\";\nimport NoteLayout from \"@components/Notes/NotesLayout\";\n\nconst NotesPage = ({ data }) => {\n  const { t } = useTranslation();\n  const { allMarkdownRemark } = data;\n\n  return (\n    <Layout>\n      <SEO title={t(\"notes.title\") + \" | \" + t(\"global.name\")} />\n\n      <NoteLayout>\n        {allMarkdownRemark.edges.map(({ node }) => (\n          <NoteCard\n            key={node.id}\n            slug={node.fields.slug}\n            title={node.frontmatter.title}\n            date={node.frontmatter.date}\n            notetags={node.frontmatter.notetags}\n            institution={node.frontmatter.institution}\n            excerpt={node.excerpt}\n          />\n        ))}\n      </NoteLayout>\n    </Layout>\n  );\n};\n\nexport default NotesPage;\n\nexport const query = graphql`\n  query ($language: String!) {\n    locales: allLocale(\n      filter: { ns: { in: [\"common\"] }, language: { eq: $language } }\n    ) {\n      edges {\n        node {\n          ns\n          data\n          language\n        }\n      }\n    }\n    allMarkdownRemark(\n      filter: {\n        fields: { posttype: { eq: \"notes\" }, language: { eq: $language } }\n      }\n      sort: { frontmatter: { date: DESC } }\n    ) {\n      edges {\n        node {\n          id\n          excerpt\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\", locale: $language)\n            notetags\n            institution\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Link, Trans, useTranslation } from \"gatsby-plugin-react-i18next\";\nimport styled from \"styled-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { TagBreadcrumb } from \"./NotesTags\";\nimport slugify from \"@components/slugify\";\n\nconst PostWrapper = styled.article`\n  overflow: auto;\n  margin-bottom: 70px;\n  /* margin-top: 100px; */\n  padding: 30px 30px;\n  border-top: 5px solid ${(p) => p.theme.primaryColor};\n  border-radius: 10px;\n  box-shadow: ${(p) => p.theme.shadowSmall};\n  background-color: ${(p) => p.theme.bgColor};\n\n  &:hover {\n    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);\n  }\n\n  span {\n    font-size: 13px;\n    color: gray;\n  }\n`;\n\nexport const NoteDateAndReadTime = ({ date, institution }) => (\n  <span style={{ fontSize: 13, color: \"gray\" }}>\n    <span aria-label={`publish date ${date}`}>\n      <FontAwesomeIcon color=\"gray\" icon=\"calendar-alt\" />\n      &nbsp;&nbsp;{date}\n    </span>\n    &nbsp;&nbsp;&nbsp;\n    <span aria-label={`${institution}`}>\n      <FontAwesomeIcon color=\"gray\" icon={[\"fas\", \"institution\"]} />\n      &nbsp;&nbsp;{institution}\n    </span>\n  </span>\n);\n\nconst NoteCard = ({ date, institution, title, excerpt, slug, notetags }) => {\n  return (\n    <Link to={slug} aria-label={`${title} - ${institution}`}>\n      <PostWrapper>\n        <NoteDateAndReadTime date={date} institution={institution} />\n\n        <h2>{title}</h2>\n        <p>{excerpt}</p>\n\n        <div style={{ marginTop: 20 }}>\n          {notetags.map((tag) => (\n            <TagBreadcrumb\n              key={tag}\n              aria-label={`${tag} tag`}\n              to={`/notes/tags/${slugify(tag)}/`}\n            >\n              {tag}\n            </TagBreadcrumb>\n          ))}\n        </div>\n      </PostWrapper>\n    </Link>\n  );\n};\n\nNoteDateAndReadTime.propTypes = {\n  date: PropTypes.string.isRequired,\n  institution: PropTypes.string.isRequired,\n};\n\nNoteCard.propTypes = {\n  date: PropTypes.string.isRequired,\n  institution: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  excerpt: PropTypes.string.isRequired,\n  slug: PropTypes.string.isRequired,\n  notetags: PropTypes.array.isRequired,\n};\nexport default NoteCard;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { graphql, useStaticQuery } from \"gatsby\";\nimport { Link, useI18next } from \"gatsby-plugin-react-i18next\";\nimport slugify from \"@components/slugify\";\n\nexport const useTags = () => {\n  const { language } = useI18next();\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(\n        limit: 2000\n        filter: { fields: { posttype: { eq: \"notes\" } } }\n      ) {\n        edges {\n          node {\n            fields {\n              language\n            }\n            frontmatter {\n              notetags\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  // Filter by language and collect tags\n  const languagePosts = data.allMarkdownRemark.edges.filter(\n    ({ node }) => node.fields.language === language\n  );\n\n  // Collect all tags from current language posts\n  const tagCounts = {};\n  languagePosts.forEach(({ node }) => {\n    if (node.frontmatter.notetags) {\n      node.frontmatter.notetags.forEach((tag) => {\n        tagCounts[tag] = (tagCounts[tag] || 0) + 1;\n      });\n    }\n  });\n\n  // Convert to the expected format\n  const group = Object.entries(tagCounts).map(([fieldValue, totalCount]) => ({\n    fieldValue,\n    totalCount,\n  }));\n\n  return { allMarkdownRemark: { group } };\n};\n\nexport const TagBreadcrumb = styled(Link)`\n  float: left;\n  border: 1px solid ${(p) => (p.theme.dark ? p.theme.primaryColor : \"#d9e0ff\")};\n  border-radius: 50px;\n  padding: 8px 13px;\n  line-height: 10px;\n  margin: 5px;\n  font-size: 12px;\n\n  &:hover {\n    background: ${(p) => (p.theme.dark ? p.theme.primaryColor : \"#d9e0ff\")};\n    color: ${(p) => (p.theme.dark ? \"#d9e0ff\" : \"#105286\")};\n  }\n`;\n\nconst Tags = () => {\n  const { language } = useI18next();\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(\n        limit: 2000\n        filter: { fields: { posttype: { eq: \"notes\" } } }\n      ) {\n        edges {\n          node {\n            fields {\n              language\n            }\n            frontmatter {\n              notetags\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  // Filter by language and collect tags\n  const languagePosts = data.allMarkdownRemark.edges.filter(\n    ({ node }) => node.fields.language === language\n  );\n\n  // Collect all tags from current language posts\n  const tagCounts = {};\n  languagePosts.forEach(({ node }) => {\n    if (node.frontmatter.notetags) {\n      node.frontmatter.notetags.forEach((tag) => {\n        tagCounts[tag] = (tagCounts[tag] || 0) + 1;\n      });\n    }\n  });\n\n  // Convert to the expected format\n  const tags = Object.entries(tagCounts).map(([fieldValue, totalCount]) => ({\n    fieldValue,\n    totalCount,\n  }));\n\n  return (\n    <section style={{ overflow: \"auto\" }}>\n      {tags.map((tag) => (\n        <TagBreadcrumb\n          key={tag.fieldValue}\n          to={`/notes/tags/${slugify(tag.fieldValue)}/`}\n          aria-label={`${tag.totalCount} posts tagged with ${tag.fieldValue}`}\n        >\n          {tag.fieldValue}, {tag.totalCount}\n        </TagBreadcrumb>\n      ))}\n    </section>\n  );\n};\n\nexport default Tags;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport styled from 'styled-components';\n\nconst SplitLayoutWrapper = styled.section`\n  ${p => p.theme.spacing.sectionBottom};\n\n  & article:first-of-type {\n    margin-top: 15px;\n  }\n\n  display: grid;\n  grid-template-columns: minmax(750px, 1fr) 1fr;\n  grid-column-gap: 30px;\n  grid-template-areas: 'post side';\n\n  .layout__content {\n    grid-area: post;\n  }\n  .layout__aside {\n    grid-area: side;\n  }\n\n  @media ${props => props.theme.media.fablet} {\n    /* setting g-t-c to 1fr 1fr because in mobile \n    version minmax was breaking the layout */\n    grid-template-columns: 1fr 1fr;\n    grid-column-gap: 0px;\n    grid-row-gap: 30px;\n    grid-template-areas:\n      'post post'\n      'side side';\n  }\n\n  .sticky__aside {\n    position: sticky;\n    top: 100px;\n  }\n`;\n\nconst SplitLayout = ({ content, aside }) => (\n  <SplitLayoutWrapper>\n    <section className=\"layout__content\">{content && content}</section>\n    <section className=\"layout__aside\">\n      <aside className=\"sticky__aside\">{aside && aside}</aside>\n    </section>\n  </SplitLayoutWrapper>\n);\n\nSplitLayout.propTypes = {\n  content: PropTypes.node.isRequired,\n  aside: PropTypes.node.isRequired,\n};\n\nexport default SplitLayout;\n"],"names":["module","exports","str","toString","trim","toLowerCase","replace","TagBreadcrumb","styled","Link","withConfig","displayName","componentId","p","theme","dark","primaryColor","Institutions","language","useI18next","languagePosts","useStaticQuery","allMarkdownRemark","edges","filter","_ref4","node","fields","institutionCounts","forEach","_ref5","frontmatter","institution","Array","isArray","institutions","Object","entries","map","_ref6","fieldValue","totalCount","React","style","overflow","tag","_languagePosts$find","find","_ref7","includes","slug","institution_slug","slugify","key","to","randomGenerator","min","max","Math","floor","random","useRandomNotePost","i18n","useTranslation","currentLanguage","filteredPosts","_ref","length","randomSlug","randomTitle","randomPost","window","location","pathname","title","children","sharerSection","t","SplitLayout","content","aside","fontSize","Tags","data","Layout","SEO","NoteLayout","_ref2","NoteCard","id","date","notetags","excerpt","PostWrapper","article","shadowSmall","bgColor","NoteDateAndReadTime","color","FontAwesomeIcon","icon","marginTop","tagCounts","tags","SplitLayoutWrapper","section","spacing","sectionBottom","props","media","fablet","className"],"sourceRoot":""}