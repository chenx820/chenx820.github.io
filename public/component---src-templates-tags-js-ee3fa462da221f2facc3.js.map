{"version":3,"sources":["webpack:///./src/templates/tags.js","webpack:///./src/components/slugify.js","webpack:///./src/components/Blog/BlogCard.js","webpack:///./src/components/common/SplitLayout.js","webpack:///./src/components/Blog/Tags.js","webpack:///./src/hooks/useRandomBlogPost.js","webpack:///./src/components/Blog/BlogLayout.js"],"names":["TagsPage","_ref","data","pageContext","tag","edges","totalCount","allMarkdownRemark","tagHeader","React","createElement","Layout","SEO","title","BlogLayout","map","_ref2","node","slug","fields","date","tags","frontmatter","BlogCard","key","id","readtime","timeToRead","excerpt","module","exports","str","match","x","toLowerCase","join","PostWrapper","styled","article","withConfig","displayName","componentId","p","theme","dark","accentColor","primaryColor","shadowSmall","secondaryColor","BlogDateAndReadTime","style","fontSize","color","aria-label","FontAwesomeIcon","icon","Link","to","marginTop","TagBreadcrumb","slugify","SplitLayoutWrapper","section","spacing","sectionBottom","props","media","fablet","SplitLayout","content","aside","className","Tags","useStaticQuery","overflow","group","fieldValue","randomGenerator","min","max","Math","floor","random","useRandomBlogPost","blogposts","randomPost","window","location","pathname","randomSlug","randomTitle","children","sharerSection","Fragment"],"mappings":"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","file":"component---src-templates-tags-js-ee3fa462da221f2facc3.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\n\nimport SEO from '@components/seo';\nimport Layout from '@components/Layout/Layout';\nimport BlogCard from '@components/Blog/BlogCard';\nimport BlogLayout from '@components/Blog/BlogLayout';\n\nconst TagsPage = ({ data, pageContext }) => {\n  const { tag } = pageContext;\n  const { edges, totalCount } = data.allMarkdownRemark;\n\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? '' : 's'\n  } tagged with \"${tag}\"`;\n\n  return (\n    <Layout>\n      <SEO title={tagHeader + ' | Anurag Hazra'} />\n\n      <BlogLayout>\n        <h1>{tagHeader}</h1>\n        <br />\n        <br />\n        {edges.map(({ node }) => {\n          const { slug } = node.fields;\n          const { title, date, tags } = node.frontmatter;\n          return (\n            <BlogCard\n              tags={tags}\n              key={node.id}\n              slug={slug}\n              title={title}\n              date={date}\n              readtime={node.timeToRead}\n              excerpt={node.excerpt}\n            />\n          );\n        })}\n      </BlogLayout>\n    </Layout>\n  );\n};\nexport default TagsPage;\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          excerpt\n          timeToRead\n          fields {\n            slug\n          }\n          frontmatter {\n            tags\n            title\n            date(formatString: \"MMMM DD, YYYY\", locale: \"en\")\n          }\n        }\n      }\n    }\n  }\n`;\n","const slugify = str =>\n  str &&\n  str\n    .match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g)\n    .map(x => x.toLowerCase())\n    .join('-');\n\nmodule.exports = slugify;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Link from 'gatsby-link';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { TagBreadcrumb } from './Tags';\nimport slugify from '@components/slugify';\n\nconst PostWrapper = styled.article`\n  overflow: auto;\n  margin-bottom: 70px;\n  /* margin-top: 100px; */\n  padding: 30px 30px;\n  border-top: 5px solid\n    ${p => (p.theme.dark ? p.theme.accentColor : p.theme.primaryColor)};\n  border-radius: 10px;\n  box-shadow: ${p => p.theme.shadowSmall};\n  background-color: ${p => p.theme.secondaryColor};\n\n  &:hover {\n    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);\n  }\n\n  span {\n    font-size: 13px;\n    color: gray;\n  }\n`;\n\nexport const BlogDateAndReadTime = ({ date, readtime }) => (\n  <span style={{ fontSize: 13, color: 'gray' }}>\n    <span aria-label={`publish date ${date}`}>\n      <FontAwesomeIcon color=\"gray\" icon=\"calendar-alt\" />\n      &nbsp;&nbsp;{date}\n    </span>\n    &nbsp;&nbsp;&nbsp;\n    <span aria-label={`${readtime} minutes read`}>\n      <FontAwesomeIcon color=\"gray\" icon=\"clock\" />\n      &nbsp;&nbsp;{readtime}min read\n    </span>\n  </span>\n);\n\nconst BlogCard = ({ date, readtime, title, excerpt, slug, tags }) => {\n  return (\n    <Link to={slug} aria-label={`${title} - read time ${readtime} minutes`}>\n      <PostWrapper>\n        <BlogDateAndReadTime date={date} readtime={readtime} />\n\n        <h2>{title}</h2>\n        <p>{excerpt}</p>\n\n        <div style={{ marginTop: 20 }}>\n          {tags.map(tag => (\n            <TagBreadcrumb\n              key={tag}\n              aria-label={`${tag} tag`}\n              to={`/blog/tags/${slugify(tag)}/`}\n            >\n              {tag}\n            </TagBreadcrumb>\n          ))}\n        </div>\n      </PostWrapper>\n    </Link>\n  );\n};\n\nBlogDateAndReadTime.propTypes = {\n  date: PropTypes.string.isRequired,\n  readtime: PropTypes.number.isRequired,\n};\n\nBlogCard.propTypes = {\n  date: PropTypes.string.isRequired,\n  readtime: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  excerpt: PropTypes.string.isRequired,\n  slug: PropTypes.string.isRequired,\n  tags: PropTypes.array.isRequired,\n};\nexport default BlogCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport styled from 'styled-components';\n\nconst SplitLayoutWrapper = styled.section`\n  ${p => p.theme.spacing.sectionBottom};\n\n  & article:first-of-type {\n    margin-top: 15px;\n  }\n\n  display: grid;\n  grid-template-columns: minmax(750px, 1fr) 1fr;\n  grid-column-gap: 30px;\n  grid-template-areas: 'post side';\n\n  .layout__content {\n    grid-area: post;\n  }\n  .layout__aside {\n    grid-area: side;\n  }\n\n  @media ${props => props.theme.media.fablet} {\n    /* setting g-t-c to 1fr 1fr because in mobile \n    version minmax was breaking the layout */\n    grid-template-columns: 1fr 1fr;\n    grid-column-gap: 0px;\n    grid-row-gap: 30px;\n    grid-template-areas:\n      'post post'\n      'side side';\n  }\n\n  .sticky__aside {\n    position: sticky;\n    top: 100px;\n  }\n`;\n\nconst SplitLayout = ({ content, aside }) => (\n  <SplitLayoutWrapper>\n    <section className=\"layout__content\">{content && content}</section>\n    <section className=\"layout__aside\">\n      <aside className=\"sticky__aside\">{aside && aside}</aside>\n    </section>\n  </SplitLayoutWrapper>\n);\n\nSplitLayout.propTypes = {\n  content: PropTypes.node.isRequired,\n  aside: PropTypes.node.isRequired,\n};\n\nexport default SplitLayout;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Link, graphql, useStaticQuery } from 'gatsby';\nimport slugify from '@components/slugify';\n\nexport const useTags = () => {\n  const tags = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(limit: 2000) {\n        group(field: frontmatter___tags) {\n          fieldValue\n          totalCount\n        }\n      }\n    }\n  `);\n\n  return tags;\n};\n\nexport const TagBreadcrumb = styled(Link)`\n  float: left;\n  border: 1px solid ${p => (p.theme.dark ? p.theme.primaryColor : '#d9e0ff')};\n  border-radius: 50px;\n  padding: 8px 13px;\n  line-height: 10px;\n  margin: 5px;\n  font-size: 12px;\n\n  &:hover {\n    background: ${p => (p.theme.dark ? p.theme.primaryColor : '#d9e0ff')};\n    color: ${p => (p.theme.dark ? '#d9e0ff' : '#6D83F2')};\n  }\n`;\n\nconst Tags = () => {\n  const tags = useTags();\n\n  return (\n    <section style={{ overflow: 'auto' }}>\n      {tags.allMarkdownRemark.group.map(tag => (\n        <TagBreadcrumb\n          key={tag.fieldValue}\n          to={`/blog/tags/${slugify(tag.fieldValue)}/`}\n          aria-label={`${tag.totalCount} posts tagged with ${tag.fieldValue}`}\n        >\n          {tag.fieldValue}, {tag.totalCount}\n        </TagBreadcrumb>\n      ))}\n    </section>\n  );\n};\n\nexport default Tags;\n","import { useStaticQuery, graphql } from 'gatsby';\n\nexport const randomGenerator = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst useRandomBlogPost = () => {\n  const blogposts = useStaticQuery(\n    graphql`\n      query {\n        allMarkdownRemark(filter: { fields: { posttype: { eq: \"blog\" } } }) {\n          edges {\n            node {\n              frontmatter {\n                title\n              }\n              fields {\n                slug\n              }\n            }\n          }\n          totalCount\n        }\n      }\n    `\n  );\n\n  let randomPost =\n    blogposts.allMarkdownRemark.edges[\n      randomGenerator(0, blogposts.allMarkdownRemark.totalCount - 1)\n    ];\n\n  // make sure we don't have redundant randomPost\n  if (typeof window !== 'undefined') {\n    while (randomPost.node.fields.slug === window.location.pathname) {\n      randomPost =\n        blogposts.allMarkdownRemark.edges[\n          randomGenerator(0, blogposts.allMarkdownRemark.totalCount - 1)\n        ];\n      // don't wanna run it second time\n      break;\n    }\n  }\n\n  return {\n    randomSlug: randomPost.node.fields.slug,\n    randomTitle: randomPost.node.frontmatter.title,\n  };\n};\nexport default useRandomBlogPost;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\nimport Link from 'gatsby-link';\n\nimport Tags from '@components/Blog/Tags';\nimport SplitLayout from '@common/SplitLayout';\nimport useRandomBlogPost from '@src/hooks/useRandomBlogPost';\n\nconst BlogLayout = ({ children, sharerSection }) => {\n  const { randomSlug, randomTitle } = useRandomBlogPost();\n\n  return (\n    <SplitLayout\n      content={children}\n      aside={\n        <>\n          <section>\n            <h4>Random post</h4>\n            <Link style={{ fontSize: '16px' }} to={randomSlug}>\n              {randomTitle}\n            </Link>\n            <br />\n            <br />\n          </section>\n          <section>\n            <h4>Tags</h4>\n            <Tags />\n            <br />\n          </section>\n          {sharerSection && sharerSection}\n        </>\n      }\n    />\n  );\n};\n\nBlogLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n  sharerSection: PropTypes.node,\n};\n\nexport default BlogLayout;\n"],"sourceRoot":""}