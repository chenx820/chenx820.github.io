{"version":3,"file":"component---src-templates-notes-tags-js-a5241f2715f808118eb6.js","mappings":"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","sources":["webpack://chen-huang/./src/templates/notes-tags.js","webpack://chen-huang/./src/components/slugify.js","webpack://chen-huang/./src/components/Notes/NotesInstitutions.js","webpack://chen-huang/./src/hooks/useRandomNotePost.js","webpack://chen-huang/./src/components/Notes/NotesLayout.js","webpack://chen-huang/./src/components/Notes/NoteCard.js","webpack://chen-huang/./src/components/Notes/NotesTags.js","webpack://chen-huang/./src/components/common/SplitLayout.js"],"sourcesContent":["import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport { useTranslation } from \"gatsby-plugin-react-i18next\";\nimport SEO from \"@components/seo\";\n\nimport Layout from \"@components/Layout/Layout\";\n\nimport NoteCard from \"@src/components/Notes/NoteCard\";\nimport NoteLayout from \"@src/components/Notes/NotesLayout\";\n\nconst TagsPage = ({ data, pageContext }) => {\n  const { t } = useTranslation();\n  const { tag } = pageContext;\n  const { edges, totalCount } = data.allMarkdownRemark;\n\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`;\n\n  return (\n    <Layout>\n      <SEO title={tagHeader + \" | \" + t(\"global.name\")} />\n\n      <NoteLayout>\n        <h1>{tagHeader}</h1>\n        <br />\n        <br />\n        {edges.map(({ node }) => {\n          const { slug } = node.fields;\n          const { title, date, notetags, institution } = node.frontmatter;\n          return (\n            <NoteCard\n              notetags={notetags}\n              key={node.id}\n              slug={slug}\n              title={title}\n              date={date}\n              institution={institution}\n              excerpt={node.excerpt}\n            />\n          );\n        })}\n      </NoteLayout>\n    </Layout>\n  );\n};\nexport default TagsPage;\n\nexport const pageQuery = graphql`\n  query ($tag: String, $language: String!) {\n    locales: allLocale(\n      filter: { ns: { in: [\"common\"] }, language: { eq: $language } }\n    ) {\n      edges {\n        node {\n          ns\n          data\n          language\n        }\n      }\n    }\n    allMarkdownRemark(\n      sort: { frontmatter: { date: DESC } }\n      filter: {\n        frontmatter: { notetags: { in: [$tag] } }\n        fields: { language: { eq: $language } }\n      }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            notetags\n            title\n            date(formatString: \"MMMM DD, YYYY\", locale: $language)\n            institution\n          }\n        }\n      }\n    }\n  }\n`;\n","const slugify = (str) =>\n  str\n    ?.toString()\n    .trim()\n    .toLowerCase()\n    .replace(/[^a-z0-9\\s-]/g, \"\") // remove non-alphanumeric characters except space and dash\n    .replace(/\\s+/g, \"-\") // replace spaces with dashes\n    .replace(/-+/g, \"-\"); // collapse multiple dashes\n\nmodule.exports = slugify;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { graphql, useStaticQuery } from \"gatsby\";\nimport { Link, useI18next } from \"gatsby-plugin-react-i18next\";\nimport slugify from \"@components/slugify\";\n\nexport const useUniversity = () => {\n  const { language } = useI18next();\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(\n        limit: 2000\n        filter: { fields: { posttype: { eq: \"notes\" } } }\n      ) {\n        edges {\n          node {\n            fields {\n              language\n            }\n            frontmatter {\n              institution\n              institution_slug\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  // Filter by language and collect institutions\n  const languagePosts = data.allMarkdownRemark.edges.filter(\n    ({ node }) => node.fields.language === language\n  );\n\n  // Collect all institutions from current language posts\n  const institutionCounts = {};\n  languagePosts.forEach(({ node }) => {\n    if (node.frontmatter.institution) {\n      const institutions = Array.isArray(node.frontmatter.institution)\n        ? node.frontmatter.institution\n        : [node.frontmatter.institution];\n\n      institutions.forEach((institution) => {\n        institutionCounts[institution] =\n          (institutionCounts[institution] || 0) + 1;\n      });\n    }\n  });\n\n  // Convert to the expected format\n  const group = Object.entries(institutionCounts).map(\n    ([fieldValue, totalCount]) => ({\n      fieldValue,\n      totalCount,\n    })\n  );\n\n  return { allMarkdownRemark: { group } };\n};\n\nexport const TagBreadcrumb = styled(Link)`\n  float: left;\n  border: 1px solid ${(p) => (p.theme.dark ? p.theme.primaryColor : \"#d9e0ff\")};\n  border-radius: 50px;\n  padding: 8px 13px;\n  line-height: 110%;\n  margin: 5px;\n  font-size: 12px;\n\n  &:hover {\n    background: ${(p) => (p.theme.dark ? p.theme.primaryColor : \"#d9e0ff\")};\n    color: ${(p) => (p.theme.dark ? \"#d9e0ff\" : \"#105286\")};\n  }\n`;\n\nconst Institutions = () => {\n  const { language } = useI18next();\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(\n        limit: 2000\n        filter: { fields: { posttype: { eq: \"notes\" } } }\n      ) {\n        edges {\n          node {\n            fields {\n              language\n            }\n            frontmatter {\n              institution\n              institution_slug\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  // Filter by language and collect institutions\n  const languagePosts = data.allMarkdownRemark.edges.filter(\n    ({ node }) => node.fields.language === language\n  );\n\n  // Collect all institutions from current language posts\n  const institutionCounts = {};\n  languagePosts.forEach(({ node }) => {\n    if (node.frontmatter.institution) {\n      const institutions = Array.isArray(node.frontmatter.institution)\n        ? node.frontmatter.institution\n        : [node.frontmatter.institution];\n\n      institutions.forEach((institution) => {\n        institutionCounts[institution] =\n          (institutionCounts[institution] || 0) + 1;\n      });\n    }\n  });\n\n  // Convert to the expected format\n  const institutions = Object.entries(institutionCounts).map(\n    ([fieldValue, totalCount]) => ({\n      fieldValue,\n      totalCount,\n    })\n  );\n\n  return (\n    <section style={{ overflow: \"auto\" }}>\n      {institutions.map((tag) => {\n        // 查找 institution_slug\n        // 需要先找到对应的 node\n        const node = languagePosts.find(({ node }) =>\n          Array.isArray(node.frontmatter.institution)\n            ? node.frontmatter.institution.includes(tag.fieldValue)\n            : node.frontmatter.institution === tag.fieldValue\n        )?.node;\n\n        const slug =\n          node && node.frontmatter.institution_slug\n            ? node.frontmatter.institution_slug\n            : slugify(tag.fieldValue);\n\n        return (\n          <TagBreadcrumb\n            key={tag.fieldValue}\n            to={`/notes/institution/${slug}/`}\n            aria-label={`${tag.totalCount} posts tagged with ${tag.fieldValue}`}\n          >\n            {tag.fieldValue}, {tag.totalCount}\n          </TagBreadcrumb>\n        );\n      })}\n    </section>\n  );\n};\n\nexport default Institutions;\n","import { useStaticQuery, graphql } from \"gatsby\";\nimport { useTranslation } from \"gatsby-plugin-react-i18next\";\n\nexport const randomGenerator = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst useRandomNotePost = () => {\n  const { i18n } = useTranslation();\n  const currentLanguage = i18n.language;\n\n  const noteposts = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(filter: { fields: { posttype: { eq: \"notes\" } } }) {\n        edges {\n          node {\n            frontmatter {\n              title\n            }\n            fields {\n              slug\n              language\n            }\n          }\n        }\n        totalCount\n      }\n    }\n  `);\n\n  // 根据当前语言过滤文章\n  const filteredPosts = noteposts.allMarkdownRemark.edges.filter(\n    ({ node }) => node.fields.language === currentLanguage\n  );\n\n  // 如果没有当前语言的文章，返回null\n  if (filteredPosts.length === 0) {\n    return {\n      randomSlug: null,\n      randomTitle: null,\n    };\n  }\n\n  let randomPost = filteredPosts[randomGenerator(0, filteredPosts.length - 1)];\n\n  // make sure we don't have redundant randomPost\n  if (typeof window !== \"undefined\") {\n    while (randomPost.node.fields.slug === window.location.pathname) {\n      randomPost = filteredPosts[randomGenerator(0, filteredPosts.length - 1)];\n      // don't wanna run it second time\n      break;\n    }\n  }\n\n  return {\n    randomSlug: randomPost.node.fields.slug,\n    randomTitle: randomPost.node.frontmatter.title,\n  };\n};\nexport default useRandomNotePost;\n","import React from \"react\";\n\nimport PropTypes from \"prop-types\";\nimport { Link, Trans, useTranslation } from \"gatsby-plugin-react-i18next\";\nimport Tags from \"@src/components/Notes/NotesTags\";\nimport Institutions from \"@src/components/Notes/NotesInstitutions\";\nimport SplitLayout from \"@common/SplitLayout\";\nimport useRandomNotePost from \"@src/hooks/useRandomNotePost\";\n\nconst NoteLayout = ({ children, sharerSection }) => {\n  const { t } = useTranslation();\n  const { randomSlug, randomTitle } = useRandomNotePost();\n\n  return (\n    <SplitLayout\n      content={children}\n      aside={\n        <>\n          {randomSlug && randomTitle && (\n            <section>\n              <h4>{t(\"nav.random-note\", \"Random note\")}</h4>\n              <Link style={{ fontSize: \"16px\" }} to={randomSlug}>\n                {randomTitle}\n              </Link>\n              <br />\n              <br />\n            </section>\n          )}\n          <section>\n            <h4>{t(\"nav.tags\", \"Tags\")}</h4>\n            <Tags />\n            <br />\n          </section>\n          <section>\n            <h4>{t(\"nav.institution\", \"Institution\")}</h4>\n            <Institutions />\n            <br />\n          </section>\n          {sharerSection && sharerSection}\n        </>\n      }\n    />\n  );\n};\n\nNoteLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n  sharerSection: PropTypes.node,\n};\n\nexport default NoteLayout;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { Link, Trans, useTranslation } from \"gatsby-plugin-react-i18next\";\nimport styled from \"styled-components\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { TagBreadcrumb } from \"./NotesTags\";\nimport slugify from \"@components/slugify\";\n\nconst PostWrapper = styled.article`\n  overflow: auto;\n  margin-bottom: 70px;\n  /* margin-top: 100px; */\n  padding: 30px 30px;\n  border-top: 5px solid ${(p) => p.theme.primaryColor};\n  border-radius: 10px;\n  box-shadow: ${(p) => p.theme.shadowSmall};\n  background-color: ${(p) => p.theme.bgColor};\n\n  &:hover {\n    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);\n  }\n\n  span {\n    font-size: 13px;\n    color: gray;\n  }\n`;\n\nexport const NoteDateAndReadTime = ({ date, institution }) => (\n  <span style={{ fontSize: 13, color: \"gray\" }}>\n    <span aria-label={`publish date ${date}`}>\n      <FontAwesomeIcon color=\"gray\" icon=\"calendar-alt\" />\n      &nbsp;&nbsp;{date}\n    </span>\n    &nbsp;&nbsp;&nbsp;\n    <span aria-label={`${institution}`}>\n      <FontAwesomeIcon color=\"gray\" icon={[\"fas\", \"institution\"]} />\n      &nbsp;&nbsp;{institution}\n    </span>\n  </span>\n);\n\nconst NoteCard = ({ date, institution, title, excerpt, slug, notetags }) => {\n  return (\n    <Link to={slug} aria-label={`${title} - ${institution}`}>\n      <PostWrapper>\n        <NoteDateAndReadTime date={date} institution={institution} />\n\n        <h2>{title}</h2>\n        <p>{excerpt}</p>\n\n        <div style={{ marginTop: 20 }}>\n          {notetags.map((tag) => (\n            <TagBreadcrumb\n              key={tag}\n              aria-label={`${tag} tag`}\n              to={`/notes/tags/${slugify(tag)}/`}\n            >\n              {tag}\n            </TagBreadcrumb>\n          ))}\n        </div>\n      </PostWrapper>\n    </Link>\n  );\n};\n\nNoteDateAndReadTime.propTypes = {\n  date: PropTypes.string.isRequired,\n  institution: PropTypes.string.isRequired,\n};\n\nNoteCard.propTypes = {\n  date: PropTypes.string.isRequired,\n  institution: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  excerpt: PropTypes.string.isRequired,\n  slug: PropTypes.string.isRequired,\n  notetags: PropTypes.array.isRequired,\n};\nexport default NoteCard;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { graphql, useStaticQuery } from \"gatsby\";\nimport { Link, useI18next } from \"gatsby-plugin-react-i18next\";\nimport slugify from \"@components/slugify\";\n\nexport const useTags = () => {\n  const { language } = useI18next();\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(\n        limit: 2000\n        filter: { fields: { posttype: { eq: \"notes\" } } }\n      ) {\n        edges {\n          node {\n            fields {\n              language\n            }\n            frontmatter {\n              notetags\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  // Filter by language and collect tags\n  const languagePosts = data.allMarkdownRemark.edges.filter(\n    ({ node }) => node.fields.language === language\n  );\n\n  // Collect all tags from current language posts\n  const tagCounts = {};\n  languagePosts.forEach(({ node }) => {\n    if (node.frontmatter.notetags) {\n      node.frontmatter.notetags.forEach((tag) => {\n        tagCounts[tag] = (tagCounts[tag] || 0) + 1;\n      });\n    }\n  });\n\n  // Convert to the expected format\n  const group = Object.entries(tagCounts).map(([fieldValue, totalCount]) => ({\n    fieldValue,\n    totalCount,\n  }));\n\n  return { allMarkdownRemark: { group } };\n};\n\nexport const TagBreadcrumb = styled(Link)`\n  float: left;\n  border: 1px solid ${(p) => (p.theme.dark ? p.theme.primaryColor : \"#d9e0ff\")};\n  border-radius: 50px;\n  padding: 8px 13px;\n  line-height: 10px;\n  margin: 5px;\n  font-size: 12px;\n\n  &:hover {\n    background: ${(p) => (p.theme.dark ? p.theme.primaryColor : \"#d9e0ff\")};\n    color: ${(p) => (p.theme.dark ? \"#d9e0ff\" : \"#105286\")};\n  }\n`;\n\nconst Tags = () => {\n  const { language } = useI18next();\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(\n        limit: 2000\n        filter: { fields: { posttype: { eq: \"notes\" } } }\n      ) {\n        edges {\n          node {\n            fields {\n              language\n            }\n            frontmatter {\n              notetags\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  // Filter by language and collect tags\n  const languagePosts = data.allMarkdownRemark.edges.filter(\n    ({ node }) => node.fields.language === language\n  );\n\n  // Collect all tags from current language posts\n  const tagCounts = {};\n  languagePosts.forEach(({ node }) => {\n    if (node.frontmatter.notetags) {\n      node.frontmatter.notetags.forEach((tag) => {\n        tagCounts[tag] = (tagCounts[tag] || 0) + 1;\n      });\n    }\n  });\n\n  // Convert to the expected format\n  const tags = Object.entries(tagCounts).map(([fieldValue, totalCount]) => ({\n    fieldValue,\n    totalCount,\n  }));\n\n  return (\n    <section style={{ overflow: \"auto\" }}>\n      {tags.map((tag) => (\n        <TagBreadcrumb\n          key={tag.fieldValue}\n          to={`/notes/tags/${slugify(tag.fieldValue)}/`}\n          aria-label={`${tag.totalCount} posts tagged with ${tag.fieldValue}`}\n        >\n          {tag.fieldValue}, {tag.totalCount}\n        </TagBreadcrumb>\n      ))}\n    </section>\n  );\n};\n\nexport default Tags;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport styled from 'styled-components';\n\nconst SplitLayoutWrapper = styled.section`\n  ${p => p.theme.spacing.sectionBottom};\n\n  & article:first-of-type {\n    margin-top: 15px;\n  }\n\n  display: grid;\n  grid-template-columns: minmax(750px, 1fr) 1fr;\n  grid-column-gap: 30px;\n  grid-template-areas: 'post side';\n\n  .layout__content {\n    grid-area: post;\n  }\n  .layout__aside {\n    grid-area: side;\n  }\n\n  @media ${props => props.theme.media.fablet} {\n    /* setting g-t-c to 1fr 1fr because in mobile \n    version minmax was breaking the layout */\n    grid-template-columns: 1fr 1fr;\n    grid-column-gap: 0px;\n    grid-row-gap: 30px;\n    grid-template-areas:\n      'post post'\n      'side side';\n  }\n\n  .sticky__aside {\n    position: sticky;\n    top: 100px;\n  }\n`;\n\nconst SplitLayout = ({ content, aside }) => (\n  <SplitLayoutWrapper>\n    <section className=\"layout__content\">{content && content}</section>\n    <section className=\"layout__aside\">\n      <aside className=\"sticky__aside\">{aside && aside}</aside>\n    </section>\n  </SplitLayoutWrapper>\n);\n\nSplitLayout.propTypes = {\n  content: PropTypes.node.isRequired,\n  aside: PropTypes.node.isRequired,\n};\n\nexport default SplitLayout;\n"],"names":["_ref","data","pageContext","t","useTranslation","tag","edges","totalCount","allMarkdownRemark","tagHeader","React","Layout","SEO","title","NoteLayout","map","_ref2","node","slug","fields","date","notetags","institution","frontmatter","NoteCard","key","id","excerpt","module","exports","str","toString","trim","toLowerCase","replace","TagBreadcrumb","styled","Link","withConfig","displayName","componentId","p","theme","dark","primaryColor","Institutions","language","useI18next","languagePosts","useStaticQuery","filter","_ref4","institutionCounts","forEach","_ref5","Array","isArray","institutions","Object","entries","_ref6","fieldValue","style","overflow","_languagePosts$find","find","_ref7","includes","institution_slug","slugify","to","randomGenerator","min","max","Math","floor","random","useRandomNotePost","i18n","currentLanguage","filteredPosts","length","randomSlug","randomTitle","randomPost","window","location","pathname","children","sharerSection","SplitLayout","content","aside","fontSize","Tags","PostWrapper","article","shadowSmall","bgColor","NoteDateAndReadTime","color","FontAwesomeIcon","icon","marginTop","tagCounts","tags","SplitLayoutWrapper","section","spacing","sectionBottom","props","media","fablet","className"],"sourceRoot":""}